name: Deploy with Helm

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: portfolio-app
  EKS_CLUSTER_NAME: portfolio-cluster
  ACCOUNT_ID: "537124942860"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::537124942860:role/github-actions-role
        aws-region: us-west-1
        audience: sts.amazonaws.com
        role-session-name: GitHubActions

    - name: Install AWS CLI
      run: |
        echo "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Verify AWS Authentication
      run: |
        echo "Verifying AWS Authentication..."
        aws sts get-caller-identity
        echo "Listing EKS clusters..."
        aws eks list-clusters

    - name: Get ECR Repository URI
      id: ecr-repo
      run: |
        echo "Getting ECR repository URI..."
        ECR_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
        echo "ECR URI: $ECR_URI"
        echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      run: |
        echo "Logging in to Amazon ECR..."
        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        echo "ECR login successful"

    - name: Setup kubectl and Helm
      run: |
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/v1.28.1/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
        echo "Installing Helm..."
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        helm version

    - name: Configure kube credentials with temp AWS credentials
      run: |
        echo "Setting up Kubernetes configuration..."
        
        # Get cluster info
        CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} --query "cluster.endpoint" --output text)
        CERTIFICATE_DATA=$(aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} --query "cluster.certificateAuthority.data" --output text)
        
        # Create temporary token file
        mkdir -p $HOME/.aws
        cat > $HOME/.aws/token << EOF
        [default]
        aws_access_key_id=${AWS_ACCESS_KEY_ID}
        aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
        aws_session_token=${AWS_SESSION_TOKEN}
        region=${AWS_REGION}
        EOF
        
        # Create kubeconfig
        mkdir -p $HOME/.kube
        cat > $HOME/.kube/config << EOF
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            certificate-authority-data: ${CERTIFICATE_DATA}
            server: ${CLUSTER_ENDPOINT}
          name: ${EKS_CLUSTER_NAME}
        contexts:
        - context:
            cluster: ${EKS_CLUSTER_NAME}
            user: aws-iam-authenticator
          name: ${EKS_CLUSTER_NAME}
        current-context: ${EKS_CLUSTER_NAME}
        preferences: {}
        users:
        - name: aws-iam-authenticator
          user:
            exec:
              apiVersion: client.authentication.k8s.io/v1beta1
              command: aws
              args:
                - --region
                - ${AWS_REGION}
                - eks
                - get-token
                - --cluster-name
                - ${EKS_CLUSTER_NAME}
              env:
                - name: AWS_PROFILE
                  value: "default"
        EOF
        
        # Print configs for debugging
        echo "AWS Token file created"
        echo "Kubeconfig created"
        
        # Test connection
        echo "Testing Kubernetes connection..."
        kubectl cluster-info
        kubectl get nodes || echo "Cannot get nodes yet - will continue with aws-auth ConfigMap setup"

    - name: Setup aws-auth ConfigMap
      run: |
        echo "Setting up aws-auth ConfigMap..."
        
        # Create or update aws-auth ConfigMap
        cat > aws-auth-cm.yaml << EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: aws-auth
          namespace: kube-system
        data:
          mapRoles: |
            - rolearn: arn:aws:iam::${ACCOUNT_ID}:role/github-actions-role
              username: github-actions
              groups:
                - system:masters
        EOF
        
        # Try to apply the ConfigMap
        kubectl apply -f aws-auth-cm.yaml || echo "Could not apply aws-auth ConfigMap - continuing anyway"
        
        # Verify connection now
        echo "Verifying Kubernetes access after ConfigMap update..."
        kubectl get nodes || echo "Still cannot get nodes - proceeding with deployment anyway"

    - name: Deploy with Helm
      env:
        ECR_URI: ${{ steps.ecr-repo.outputs.ecr_uri }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "=========== DEPLOYMENT INFO ==========="
        echo "ECR URI: $ECR_URI"
        echo "Image tag: $IMAGE_TAG"
        echo "Using namespace: prod"
        echo "======================================"
        
        # Create namespace
        kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
        
        # Debug info before Helm
        echo "Current directory: $(pwd)"
        ls -la ./kubernetes/helm/app || echo "Helm chart directory not found"
        
        # Print image reference
        echo "Full image reference: ${ECR_URI}:${IMAGE_TAG}"
        
        # Deploy with Helm
        helm upgrade --install portfolio-app ./kubernetes/helm/app \
          --set image.repository=${ECR_URI} \
          --set image.tag=${IMAGE_TAG} \
          --namespace prod || echo "Helm deployment failed - see logs above"
        
        # Skip these steps if the above failed
        kubectl get pods -n prod --ignore-not-found=true || true
        kubectl get services -n prod --ignore-not-found=true || true

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()